basePath: /
definitions:
  domain.Account:
    properties:
      account_id:
        type: integer
      chan_name:
        type: string
      email:
        type: string
      password:
        items:
          type: integer
        type: array
      role:
        type: string
      user_id:
        type: integer
    type: object
  domain.Sub:
    properties:
      account_id:
        type: integer
      activated_at:
        type: string
      expires_at:
        type: string
      price:
        type: integer
      status:
        type: string
      user_id:
        type: integer
    type: object
  domain.Tguser:
    properties:
      status:
        type: string
      telegram_id:
        type: integer
      user_id:
        type: integer
      username:
        type: string
    type: object
  http.accountResponse:
    properties:
      account_id:
        type: integer
      email:
        type: string
      role:
        type: string
    type: object
  http.createSubscriptionRequest:
    properties:
      account_id:
        type: integer
      expires_at:
        type: string
      price:
        type: integer
      status:
        type: string
      user_id:
        type: integer
    type: object
  http.createUserRequest:
    properties:
      status:
        type: string
      telegram_id:
        type: integer
      username:
        type: string
    type: object
  http.createUserResponse:
    properties:
      status:
        type: string
      telegram_id:
        type: integer
      user_id:
        type: integer
      username:
        type: string
    type: object
  http.getUserResponse:
    properties:
      status:
        type: string
      telegram_id:
        type: integer
      user_id:
        type: integer
      username:
        type: string
    type: object
  http.loginAccountRequest:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  http.loginAccountResponse:
    properties:
      access_token:
        type: string
      access_token_expires_at:
        type: string
      account:
        $ref: '#/definitions/http.accountResponse'
      refresh_token:
        type: string
      refresh_token_expires_at:
        type: string
    type: object
  http.registerAccountRequest:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  http.updateAccountEmailRequest:
    properties:
      email:
        type: string
    type: object
  http.updateAccountPasswordRequest:
    properties:
      new_password:
        type: string
      old_password:
        type: string
    type: object
  http.updateAccountUserRequest:
    properties:
      telegram_id:
        type: integer
      user_id:
        type: integer
    type: object
  http.updateSubscriptionRequest:
    properties:
      account_id:
        type: integer
      status:
        type: string
      user_id:
        type: integer
    type: object
  http.updateUserRequest:
    properties:
      status:
        type: string
      username:
        type: string
    type: object
  http.updateUserResponse:
    properties:
      status:
        type: string
      telegram_id:
        type: integer
      user_id:
        type: integer
      username:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: This service provide functionality for storing and managing privat
    telegram channels with subscription based payments for acessing content.
  title: Telegram Subs API
  version: "1.0"
paths:
  /account/{acc_id}:
    delete:
      consumes:
      - application/json
      description: deletes an account. Only administrator can delete accounts.
      parameters:
      - description: account id
        in: path
        name: acc_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - JWT: []
      summary: Delete Account
      tags:
      - account
    get:
      consumes:
      - application/json
      description: get account by id. Creator can get only his account. Administrator
        can get any account
      parameters:
      - description: account id
        in: path
        name: acc_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Account'
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - JWT: []
      summary: Get Account
      tags:
      - account
  /account/{acc_id}/email:
    patch:
      consumes:
      - application/json
      description: updates email for current user. Admin can update email for any
        user.
      parameters:
      - description: account id
        in: path
        name: acc_id
        required: true
        type: integer
      - description: account new email
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/http.updateAccountEmailRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - JWT: []
      summary: Update Email
      tags:
      - account
  /account/{acc_id}/password:
    patch:
      consumes:
      - application/json
      description: updates password for current account. Admin can change password
        without provieding an old password. Admin can update password for any user.
      parameters:
      - description: account id
        in: path
        name: acc_id
        required: true
        type: integer
      - description: account old and new password
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/http.updateAccountPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - JWT: []
      summary: Update Password
      tags:
      - account
  /account/{acc_id}/user:
    patch:
      consumes:
      - application/json
      description: updates telegram user conected to this account. Admin, can update
        email for any user. Either of one of the fields must be provided
      parameters:
      - description: account id
        in: path
        name: acc_id
        required: true
        type: integer
      - description: account new email
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/http.updateAccountUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - JWT: []
      summary: Update TgUser
      tags:
      - account
  /account/list:
    get:
      description: get account list. Only administrator can get list of accounts
      parameters:
      - description: page size
        in: query
        name: page_size
        required: true
        type: integer
      - description: page number
        in: query
        name: page_number
        required: true
        type: integer
      - description: status name is equal to
        in: query
        name: status_eq
        type: string
      - description: status name is like
        in: query
        name: status_like
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.Account'
            type: array
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - JWT: []
      summary: List Accounts
      tags:
      - account
  /login:
    post:
      consumes:
      - application/json
      description: logins in to account with user provided credantials
      parameters:
      - description: login credentials
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/http.loginAccountRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.loginAccountResponse'
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Login
      tags:
      - auth
  /register:
    post:
      consumes:
      - application/json
      description: registers new account
      parameters:
      - description: register credantials
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/http.registerAccountRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Register
      tags:
      - auth
  /sub:
    patch:
      consumes:
      - application/json
      description: updates subscription. Admin and bot can update subscription. Can
        be used to change subscription status, or price.
      parameters:
      - description: subscription new status and price
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/http.updateSubscriptionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - JWT: []
      summary: Update
      tags:
      - subscription
    post:
      consumes:
      - application/json
      description: creates subscribtion with given users telegram_id and account_id.
        Only administrator and bot can create subscription
      parameters:
      - description: subscription info
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/http.createSubscriptionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - JWT: []
      summary: Create
      tags:
      - subscription
  /sub/list:
    get:
      description: get subscription list. Only administrator and bot can get list
        of any accounts. Ordenery user can get list of subscriptions whitch belongs
        to his account.
      parameters:
      - description: page size
        in: query
        name: page_size
        required: true
        type: integer
      - description: page number
        in: query
        name: page_number
        required: true
        type: integer
      - description: status name is equal to
        in: query
        name: status_eq
        type: string
      - description: range of prices starting at
        in: query
        items:
          type: integer
        name: price_range
        type: array
      - description: status name is like
        in: query
        name: status_like
        type: string
      - description: account id equal to
        in: query
        name: account_id
        type: integer
      - description: user id equal to
        in: query
        name: user_id
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.Sub'
            type: array
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - JWT: []
      summary: List Subscriptions
      tags:
      - subscription
  /user:
    post:
      consumes:
      - application/json
      description: creates user with given users telegram_id and username. Only administrator
        and bot can create user
      parameters:
      - description: user info
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/http.createUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.createUserResponse'
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - JWT: []
      summary: Create
      tags:
      - user
  /user/{usr_id}:
    delete:
      consumes:
      - application/json
      description: deletes user object by given id
      parameters:
      - description: user id
        in: path
        name: usr_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - JWT: []
      summary: Delete User
      tags:
      - user
    get:
      consumes:
      - application/json
      description: returns user object by given id
      parameters:
      - description: user id
        in: path
        name: usr_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.getUserResponse'
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - JWT: []
      summary: Get User
      tags:
      - user
  /user/{usr_id}/password:
    patch:
      consumes:
      - application/json
      description: updateds users username and/or status, provided by id. Admin and
        bot can update any user.
      parameters:
      - description: user id
        in: path
        name: usr_id
        required: true
        type: integer
      - description: user new status or username
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/http.updateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.updateUserResponse'
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - JWT: []
      summary: Update User
      tags:
      - user
  /user/list:
    get:
      description: get user list. Only administrator and bot can get list of accounts
      parameters:
      - description: page size
        in: query
        name: page_size
        required: true
        type: integer
      - description: page number
        in: query
        name: page_number
        required: true
        type: integer
      - description: role name is equal to
        in: query
        name: role_eq
        type: string
      - description: role name is like
        in: query
        name: role_like
        type: string
      - description: username is equal to
        in: query
        name: username_eq
        type: string
      - description: username is like
        in: query
        name: username_like
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.Tguser'
            type: array
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - JWT: []
      summary: List Users
      tags:
      - user
securityDefinitions:
  JWT:
    in: header
    name: authorization
    type: apiKey
swagger: "2.0"
