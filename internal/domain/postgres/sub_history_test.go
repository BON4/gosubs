// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testSubHistories(t *testing.T) {
	t.Parallel()

	query := SubHistories()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testSubHistoriesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SubHistory{}
	if err = randomize.Struct(seed, o, subHistoryDBTypes, true, subHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SubHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SubHistories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSubHistoriesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SubHistory{}
	if err = randomize.Struct(seed, o, subHistoryDBTypes, true, subHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SubHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := SubHistories().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SubHistories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSubHistoriesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SubHistory{}
	if err = randomize.Struct(seed, o, subHistoryDBTypes, true, subHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SubHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SubHistorySlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SubHistories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSubHistoriesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SubHistory{}
	if err = randomize.Struct(seed, o, subHistoryDBTypes, true, subHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SubHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := SubHistoryExists(ctx, tx, o.SubHistID)
	if err != nil {
		t.Errorf("Unable to check if SubHistory exists: %s", err)
	}
	if !e {
		t.Errorf("Expected SubHistoryExists to return true, but got false.")
	}
}

func testSubHistoriesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SubHistory{}
	if err = randomize.Struct(seed, o, subHistoryDBTypes, true, subHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SubHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	subHistoryFound, err := FindSubHistory(ctx, tx, o.SubHistID)
	if err != nil {
		t.Error(err)
	}

	if subHistoryFound == nil {
		t.Error("want a record, got nil")
	}
}

func testSubHistoriesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SubHistory{}
	if err = randomize.Struct(seed, o, subHistoryDBTypes, true, subHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SubHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = SubHistories().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testSubHistoriesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SubHistory{}
	if err = randomize.Struct(seed, o, subHistoryDBTypes, true, subHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SubHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := SubHistories().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testSubHistoriesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	subHistoryOne := &SubHistory{}
	subHistoryTwo := &SubHistory{}
	if err = randomize.Struct(seed, subHistoryOne, subHistoryDBTypes, false, subHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SubHistory struct: %s", err)
	}
	if err = randomize.Struct(seed, subHistoryTwo, subHistoryDBTypes, false, subHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SubHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = subHistoryOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = subHistoryTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := SubHistories().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testSubHistoriesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	subHistoryOne := &SubHistory{}
	subHistoryTwo := &SubHistory{}
	if err = randomize.Struct(seed, subHistoryOne, subHistoryDBTypes, false, subHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SubHistory struct: %s", err)
	}
	if err = randomize.Struct(seed, subHistoryTwo, subHistoryDBTypes, false, subHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SubHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = subHistoryOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = subHistoryTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SubHistories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func subHistoryBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *SubHistory) error {
	*o = SubHistory{}
	return nil
}

func subHistoryAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *SubHistory) error {
	*o = SubHistory{}
	return nil
}

func subHistoryAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *SubHistory) error {
	*o = SubHistory{}
	return nil
}

func subHistoryBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *SubHistory) error {
	*o = SubHistory{}
	return nil
}

func subHistoryAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *SubHistory) error {
	*o = SubHistory{}
	return nil
}

func subHistoryBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *SubHistory) error {
	*o = SubHistory{}
	return nil
}

func subHistoryAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *SubHistory) error {
	*o = SubHistory{}
	return nil
}

func subHistoryBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *SubHistory) error {
	*o = SubHistory{}
	return nil
}

func subHistoryAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *SubHistory) error {
	*o = SubHistory{}
	return nil
}

func testSubHistoriesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &SubHistory{}
	o := &SubHistory{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, subHistoryDBTypes, false); err != nil {
		t.Errorf("Unable to randomize SubHistory object: %s", err)
	}

	AddSubHistoryHook(boil.BeforeInsertHook, subHistoryBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	subHistoryBeforeInsertHooks = []SubHistoryHook{}

	AddSubHistoryHook(boil.AfterInsertHook, subHistoryAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	subHistoryAfterInsertHooks = []SubHistoryHook{}

	AddSubHistoryHook(boil.AfterSelectHook, subHistoryAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	subHistoryAfterSelectHooks = []SubHistoryHook{}

	AddSubHistoryHook(boil.BeforeUpdateHook, subHistoryBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	subHistoryBeforeUpdateHooks = []SubHistoryHook{}

	AddSubHistoryHook(boil.AfterUpdateHook, subHistoryAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	subHistoryAfterUpdateHooks = []SubHistoryHook{}

	AddSubHistoryHook(boil.BeforeDeleteHook, subHistoryBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	subHistoryBeforeDeleteHooks = []SubHistoryHook{}

	AddSubHistoryHook(boil.AfterDeleteHook, subHistoryAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	subHistoryAfterDeleteHooks = []SubHistoryHook{}

	AddSubHistoryHook(boil.BeforeUpsertHook, subHistoryBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	subHistoryBeforeUpsertHooks = []SubHistoryHook{}

	AddSubHistoryHook(boil.AfterUpsertHook, subHistoryAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	subHistoryAfterUpsertHooks = []SubHistoryHook{}
}

func testSubHistoriesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SubHistory{}
	if err = randomize.Struct(seed, o, subHistoryDBTypes, true, subHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SubHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SubHistories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSubHistoriesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SubHistory{}
	if err = randomize.Struct(seed, o, subHistoryDBTypes, true); err != nil {
		t.Errorf("Unable to randomize SubHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(subHistoryColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := SubHistories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSubHistoriesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SubHistory{}
	if err = randomize.Struct(seed, o, subHistoryDBTypes, true, subHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SubHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSubHistoriesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SubHistory{}
	if err = randomize.Struct(seed, o, subHistoryDBTypes, true, subHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SubHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SubHistorySlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSubHistoriesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SubHistory{}
	if err = randomize.Struct(seed, o, subHistoryDBTypes, true, subHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SubHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := SubHistories().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	subHistoryDBTypes = map[string]string{`UserID`: `bigint`, `CreatorID`: `bigint`, `ActivatedAt`: `timestamp with time zone`, `ExpiresAt`: `timestamp with time zone`, `Status`: `enum.sub_status('expired','active','cancelled')`, `Price`: `integer`, `SubHistID`: `integer`}
	_                 = bytes.MinRead
)

func testSubHistoriesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(subHistoryPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(subHistoryAllColumns) == len(subHistoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &SubHistory{}
	if err = randomize.Struct(seed, o, subHistoryDBTypes, true, subHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SubHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SubHistories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, subHistoryDBTypes, true, subHistoryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SubHistory struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testSubHistoriesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(subHistoryAllColumns) == len(subHistoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &SubHistory{}
	if err = randomize.Struct(seed, o, subHistoryDBTypes, true, subHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SubHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SubHistories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, subHistoryDBTypes, true, subHistoryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SubHistory struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(subHistoryAllColumns, subHistoryPrimaryKeyColumns) {
		fields = subHistoryAllColumns
	} else {
		fields = strmangle.SetComplement(
			subHistoryAllColumns,
			subHistoryPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := SubHistorySlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testSubHistoriesUpsert(t *testing.T) {
	t.Parallel()

	if len(subHistoryAllColumns) == len(subHistoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := SubHistory{}
	if err = randomize.Struct(seed, &o, subHistoryDBTypes, true); err != nil {
		t.Errorf("Unable to randomize SubHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert SubHistory: %s", err)
	}

	count, err := SubHistories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, subHistoryDBTypes, false, subHistoryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SubHistory struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert SubHistory: %s", err)
	}

	count, err = SubHistories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
