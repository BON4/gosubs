// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SubHistory is an object representing the database table.
type SubHistory struct {
	UserID      int64     `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	CreatorID   int64     `boil:"creator_id" json:"creator_id" toml:"creator_id" yaml:"creator_id"`
	ActivatedAt time.Time `boil:"activated_at" json:"activated_at" toml:"activated_at" yaml:"activated_at"`
	ExpiresAt   time.Time `boil:"expires_at" json:"expires_at" toml:"expires_at" yaml:"expires_at"`
	Status      SubStatus `boil:"status" json:"status" toml:"status" yaml:"status"`
	Price       null.Int  `boil:"price" json:"price,omitempty" toml:"price" yaml:"price,omitempty"`
	SubHistID   int       `boil:"sub_hist_id" json:"sub_hist_id" toml:"sub_hist_id" yaml:"sub_hist_id"`

	R *subHistoryR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L subHistoryL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SubHistoryColumns = struct {
	UserID      string
	CreatorID   string
	ActivatedAt string
	ExpiresAt   string
	Status      string
	Price       string
	SubHistID   string
}{
	UserID:      "user_id",
	CreatorID:   "creator_id",
	ActivatedAt: "activated_at",
	ExpiresAt:   "expires_at",
	Status:      "status",
	Price:       "price",
	SubHistID:   "sub_hist_id",
}

var SubHistoryTableColumns = struct {
	UserID      string
	CreatorID   string
	ActivatedAt string
	ExpiresAt   string
	Status      string
	Price       string
	SubHistID   string
}{
	UserID:      "sub_history.user_id",
	CreatorID:   "sub_history.creator_id",
	ActivatedAt: "sub_history.activated_at",
	ExpiresAt:   "sub_history.expires_at",
	Status:      "sub_history.status",
	Price:       "sub_history.price",
	SubHistID:   "sub_history.sub_hist_id",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var SubHistoryWhere = struct {
	UserID      whereHelperint64
	CreatorID   whereHelperint64
	ActivatedAt whereHelpertime_Time
	ExpiresAt   whereHelpertime_Time
	Status      whereHelperSubStatus
	Price       whereHelpernull_Int
	SubHistID   whereHelperint
}{
	UserID:      whereHelperint64{field: "\"sub_history\".\"user_id\""},
	CreatorID:   whereHelperint64{field: "\"sub_history\".\"creator_id\""},
	ActivatedAt: whereHelpertime_Time{field: "\"sub_history\".\"activated_at\""},
	ExpiresAt:   whereHelpertime_Time{field: "\"sub_history\".\"expires_at\""},
	Status:      whereHelperSubStatus{field: "\"sub_history\".\"status\""},
	Price:       whereHelpernull_Int{field: "\"sub_history\".\"price\""},
	SubHistID:   whereHelperint{field: "\"sub_history\".\"sub_hist_id\""},
}

// SubHistoryRels is where relationship names are stored.
var SubHistoryRels = struct {
	Creator string
	User    string
}{
	Creator: "Creator",
	User:    "User",
}

// subHistoryR is where relationships are stored.
type subHistoryR struct {
	Creator *Creator `boil:"Creator" json:"Creator" toml:"Creator" yaml:"Creator"`
	User    *Tguser  `boil:"User" json:"User" toml:"User" yaml:"User"`
}

// NewStruct creates a new relationship struct
func (*subHistoryR) NewStruct() *subHistoryR {
	return &subHistoryR{}
}

func (r *subHistoryR) GetCreator() *Creator {
	if r == nil {
		return nil
	}
	return r.Creator
}

func (r *subHistoryR) GetUser() *Tguser {
	if r == nil {
		return nil
	}
	return r.User
}

// subHistoryL is where Load methods for each relationship are stored.
type subHistoryL struct{}

var (
	subHistoryAllColumns            = []string{"user_id", "creator_id", "activated_at", "expires_at", "status", "price", "sub_hist_id"}
	subHistoryColumnsWithoutDefault = []string{"user_id", "creator_id", "status"}
	subHistoryColumnsWithDefault    = []string{"activated_at", "expires_at", "price", "sub_hist_id"}
	subHistoryPrimaryKeyColumns     = []string{"sub_hist_id"}
	subHistoryGeneratedColumns      = []string{}
)

type (
	// SubHistorySlice is an alias for a slice of pointers to SubHistory.
	// This should almost always be used instead of []SubHistory.
	SubHistorySlice []*SubHistory
	// SubHistoryHook is the signature for custom SubHistory hook methods
	SubHistoryHook func(context.Context, boil.ContextExecutor, *SubHistory) error

	subHistoryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	subHistoryType                 = reflect.TypeOf(&SubHistory{})
	subHistoryMapping              = queries.MakeStructMapping(subHistoryType)
	subHistoryPrimaryKeyMapping, _ = queries.BindMapping(subHistoryType, subHistoryMapping, subHistoryPrimaryKeyColumns)
	subHistoryInsertCacheMut       sync.RWMutex
	subHistoryInsertCache          = make(map[string]insertCache)
	subHistoryUpdateCacheMut       sync.RWMutex
	subHistoryUpdateCache          = make(map[string]updateCache)
	subHistoryUpsertCacheMut       sync.RWMutex
	subHistoryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var subHistoryAfterSelectHooks []SubHistoryHook

var subHistoryBeforeInsertHooks []SubHistoryHook
var subHistoryAfterInsertHooks []SubHistoryHook

var subHistoryBeforeUpdateHooks []SubHistoryHook
var subHistoryAfterUpdateHooks []SubHistoryHook

var subHistoryBeforeDeleteHooks []SubHistoryHook
var subHistoryAfterDeleteHooks []SubHistoryHook

var subHistoryBeforeUpsertHooks []SubHistoryHook
var subHistoryAfterUpsertHooks []SubHistoryHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SubHistory) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range subHistoryAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SubHistory) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range subHistoryBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SubHistory) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range subHistoryAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SubHistory) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range subHistoryBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SubHistory) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range subHistoryAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SubHistory) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range subHistoryBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SubHistory) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range subHistoryAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SubHistory) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range subHistoryBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SubHistory) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range subHistoryAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSubHistoryHook registers your hook function for all future operations.
func AddSubHistoryHook(hookPoint boil.HookPoint, subHistoryHook SubHistoryHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		subHistoryAfterSelectHooks = append(subHistoryAfterSelectHooks, subHistoryHook)
	case boil.BeforeInsertHook:
		subHistoryBeforeInsertHooks = append(subHistoryBeforeInsertHooks, subHistoryHook)
	case boil.AfterInsertHook:
		subHistoryAfterInsertHooks = append(subHistoryAfterInsertHooks, subHistoryHook)
	case boil.BeforeUpdateHook:
		subHistoryBeforeUpdateHooks = append(subHistoryBeforeUpdateHooks, subHistoryHook)
	case boil.AfterUpdateHook:
		subHistoryAfterUpdateHooks = append(subHistoryAfterUpdateHooks, subHistoryHook)
	case boil.BeforeDeleteHook:
		subHistoryBeforeDeleteHooks = append(subHistoryBeforeDeleteHooks, subHistoryHook)
	case boil.AfterDeleteHook:
		subHistoryAfterDeleteHooks = append(subHistoryAfterDeleteHooks, subHistoryHook)
	case boil.BeforeUpsertHook:
		subHistoryBeforeUpsertHooks = append(subHistoryBeforeUpsertHooks, subHistoryHook)
	case boil.AfterUpsertHook:
		subHistoryAfterUpsertHooks = append(subHistoryAfterUpsertHooks, subHistoryHook)
	}
}

// OneG returns a single subHistory record from the query using the global executor.
func (q subHistoryQuery) OneG(ctx context.Context) (*SubHistory, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single subHistory record from the query.
func (q subHistoryQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SubHistory, error) {
	o := &SubHistory{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sub_history")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all SubHistory records from the query using the global executor.
func (q subHistoryQuery) AllG(ctx context.Context) (SubHistorySlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all SubHistory records from the query.
func (q subHistoryQuery) All(ctx context.Context, exec boil.ContextExecutor) (SubHistorySlice, error) {
	var o []*SubHistory

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SubHistory slice")
	}

	if len(subHistoryAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all SubHistory records in the query using the global executor
func (q subHistoryQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all SubHistory records in the query.
func (q subHistoryQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sub_history rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q subHistoryQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q subHistoryQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sub_history exists")
	}

	return count > 0, nil
}

// Creator pointed to by the foreign key.
func (o *SubHistory) Creator(mods ...qm.QueryMod) creatorQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"creator_id\" = ?", o.CreatorID),
	}

	queryMods = append(queryMods, mods...)

	return Creators(queryMods...)
}

// User pointed to by the foreign key.
func (o *SubHistory) User(mods ...qm.QueryMod) tguserQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"user_id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Tgusers(queryMods...)
}

// LoadCreator allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (subHistoryL) LoadCreator(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSubHistory interface{}, mods queries.Applicator) error {
	var slice []*SubHistory
	var object *SubHistory

	if singular {
		var ok bool
		object, ok = maybeSubHistory.(*SubHistory)
		if !ok {
			object = new(SubHistory)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSubHistory)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSubHistory))
			}
		}
	} else {
		s, ok := maybeSubHistory.(*[]*SubHistory)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSubHistory)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSubHistory))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &subHistoryR{}
		}
		args = append(args, object.CreatorID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &subHistoryR{}
			}

			for _, a := range args {
				if a == obj.CreatorID {
					continue Outer
				}
			}

			args = append(args, obj.CreatorID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`creator`),
		qm.WhereIn(`creator.creator_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Creator")
	}

	var resultSlice []*Creator
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Creator")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for creator")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for creator")
	}

	if len(subHistoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Creator = foreign
		if foreign.R == nil {
			foreign.R = &creatorR{}
		}
		foreign.R.SubHistories = append(foreign.R.SubHistories, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CreatorID == foreign.CreatorID {
				local.R.Creator = foreign
				if foreign.R == nil {
					foreign.R = &creatorR{}
				}
				foreign.R.SubHistories = append(foreign.R.SubHistories, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (subHistoryL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSubHistory interface{}, mods queries.Applicator) error {
	var slice []*SubHistory
	var object *SubHistory

	if singular {
		var ok bool
		object, ok = maybeSubHistory.(*SubHistory)
		if !ok {
			object = new(SubHistory)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSubHistory)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSubHistory))
			}
		}
	} else {
		s, ok := maybeSubHistory.(*[]*SubHistory)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSubHistory)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSubHistory))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &subHistoryR{}
		}
		args = append(args, object.UserID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &subHistoryR{}
			}

			for _, a := range args {
				if a == obj.UserID {
					continue Outer
				}
			}

			args = append(args, obj.UserID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`tguser`),
		qm.WhereIn(`tguser.user_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Tguser")
	}

	var resultSlice []*Tguser
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Tguser")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for tguser")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tguser")
	}

	if len(subHistoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &tguserR{}
		}
		foreign.R.UserSubHistories = append(foreign.R.UserSubHistories, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.UserID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &tguserR{}
				}
				foreign.R.UserSubHistories = append(foreign.R.UserSubHistories, local)
				break
			}
		}
	}

	return nil
}

// SetCreatorG of the subHistory to the related item.
// Sets o.R.Creator to related.
// Adds o to related.R.SubHistories.
// Uses the global database handle.
func (o *SubHistory) SetCreatorG(ctx context.Context, insert bool, related *Creator) error {
	return o.SetCreator(ctx, boil.GetContextDB(), insert, related)
}

// SetCreator of the subHistory to the related item.
// Sets o.R.Creator to related.
// Adds o to related.R.SubHistories.
func (o *SubHistory) SetCreator(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Creator) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"sub_history\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"creator_id"}),
		strmangle.WhereClause("\"", "\"", 2, subHistoryPrimaryKeyColumns),
	)
	values := []interface{}{related.CreatorID, o.SubHistID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CreatorID = related.CreatorID
	if o.R == nil {
		o.R = &subHistoryR{
			Creator: related,
		}
	} else {
		o.R.Creator = related
	}

	if related.R == nil {
		related.R = &creatorR{
			SubHistories: SubHistorySlice{o},
		}
	} else {
		related.R.SubHistories = append(related.R.SubHistories, o)
	}

	return nil
}

// SetUserG of the subHistory to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserSubHistories.
// Uses the global database handle.
func (o *SubHistory) SetUserG(ctx context.Context, insert bool, related *Tguser) error {
	return o.SetUser(ctx, boil.GetContextDB(), insert, related)
}

// SetUser of the subHistory to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserSubHistories.
func (o *SubHistory) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Tguser) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"sub_history\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, subHistoryPrimaryKeyColumns),
	)
	values := []interface{}{related.UserID, o.SubHistID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.UserID
	if o.R == nil {
		o.R = &subHistoryR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &tguserR{
			UserSubHistories: SubHistorySlice{o},
		}
	} else {
		related.R.UserSubHistories = append(related.R.UserSubHistories, o)
	}

	return nil
}

// SubHistories retrieves all the records using an executor.
func SubHistories(mods ...qm.QueryMod) subHistoryQuery {
	mods = append(mods, qm.From("\"sub_history\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"sub_history\".*"})
	}

	return subHistoryQuery{q}
}

// FindSubHistoryG retrieves a single record by ID.
func FindSubHistoryG(ctx context.Context, subHistID int, selectCols ...string) (*SubHistory, error) {
	return FindSubHistory(ctx, boil.GetContextDB(), subHistID, selectCols...)
}

// FindSubHistory retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSubHistory(ctx context.Context, exec boil.ContextExecutor, subHistID int, selectCols ...string) (*SubHistory, error) {
	subHistoryObj := &SubHistory{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"sub_history\" where \"sub_hist_id\"=$1", sel,
	)

	q := queries.Raw(query, subHistID)

	err := q.Bind(ctx, exec, subHistoryObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sub_history")
	}

	if err = subHistoryObj.doAfterSelectHooks(ctx, exec); err != nil {
		return subHistoryObj, err
	}

	return subHistoryObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *SubHistory) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SubHistory) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sub_history provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(subHistoryColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	subHistoryInsertCacheMut.RLock()
	cache, cached := subHistoryInsertCache[key]
	subHistoryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			subHistoryAllColumns,
			subHistoryColumnsWithDefault,
			subHistoryColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(subHistoryType, subHistoryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(subHistoryType, subHistoryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"sub_history\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"sub_history\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sub_history")
	}

	if !cached {
		subHistoryInsertCacheMut.Lock()
		subHistoryInsertCache[key] = cache
		subHistoryInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single SubHistory record using the global executor.
// See Update for more documentation.
func (o *SubHistory) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the SubHistory.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SubHistory) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	subHistoryUpdateCacheMut.RLock()
	cache, cached := subHistoryUpdateCache[key]
	subHistoryUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			subHistoryAllColumns,
			subHistoryPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sub_history, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"sub_history\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, subHistoryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(subHistoryType, subHistoryMapping, append(wl, subHistoryPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sub_history row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sub_history")
	}

	if !cached {
		subHistoryUpdateCacheMut.Lock()
		subHistoryUpdateCache[key] = cache
		subHistoryUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q subHistoryQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q subHistoryQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sub_history")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sub_history")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o SubHistorySlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SubHistorySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), subHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"sub_history\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, subHistoryPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in subHistory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all subHistory")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *SubHistory) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SubHistory) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sub_history provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(subHistoryColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	subHistoryUpsertCacheMut.RLock()
	cache, cached := subHistoryUpsertCache[key]
	subHistoryUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			subHistoryAllColumns,
			subHistoryColumnsWithDefault,
			subHistoryColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			subHistoryAllColumns,
			subHistoryPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert sub_history, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(subHistoryPrimaryKeyColumns))
			copy(conflict, subHistoryPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"sub_history\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(subHistoryType, subHistoryMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(subHistoryType, subHistoryMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert sub_history")
	}

	if !cached {
		subHistoryUpsertCacheMut.Lock()
		subHistoryUpsertCache[key] = cache
		subHistoryUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single SubHistory record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *SubHistory) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single SubHistory record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SubHistory) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SubHistory provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), subHistoryPrimaryKeyMapping)
	sql := "DELETE FROM \"sub_history\" WHERE \"sub_hist_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sub_history")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sub_history")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q subHistoryQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q subHistoryQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no subHistoryQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sub_history")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sub_history")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o SubHistorySlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SubHistorySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(subHistoryBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), subHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"sub_history\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, subHistoryPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from subHistory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sub_history")
	}

	if len(subHistoryAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *SubHistory) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no SubHistory provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SubHistory) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSubHistory(ctx, exec, o.SubHistID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SubHistorySlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty SubHistorySlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SubHistorySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SubHistorySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), subHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"sub_history\".* FROM \"sub_history\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, subHistoryPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SubHistorySlice")
	}

	*o = slice

	return nil
}

// SubHistoryExistsG checks if the SubHistory row exists.
func SubHistoryExistsG(ctx context.Context, subHistID int) (bool, error) {
	return SubHistoryExists(ctx, boil.GetContextDB(), subHistID)
}

// SubHistoryExists checks if the SubHistory row exists.
func SubHistoryExists(ctx context.Context, exec boil.ContextExecutor, subHistID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"sub_history\" where \"sub_hist_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, subHistID)
	}
	row := exec.QueryRowContext(ctx, sql, subHistID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sub_history exists")
	}

	return exists, nil
}
