// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Tguser is an object representing the database table.
type Tguser struct {
	UserID     int64      `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	TelegramID int64      `boil:"telegram_id" json:"telegram_id" toml:"telegram_id" yaml:"telegram_id"`
	Username   string     `boil:"username" json:"username" toml:"username" yaml:"username"`
	Status     UserStatus `boil:"status" json:"status" toml:"status" yaml:"status"`

	R *tguserR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L tguserL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TguserColumns = struct {
	UserID     string
	TelegramID string
	Username   string
	Status     string
}{
	UserID:     "user_id",
	TelegramID: "telegram_id",
	Username:   "username",
	Status:     "status",
}

var TguserTableColumns = struct {
	UserID     string
	TelegramID string
	Username   string
	Status     string
}{
	UserID:     "tguser.user_id",
	TelegramID: "tguser.telegram_id",
	Username:   "tguser.username",
	Status:     "tguser.status",
}

// Generated where

type whereHelperUserStatus struct{ field string }

func (w whereHelperUserStatus) EQ(x UserStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelperUserStatus) NEQ(x UserStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperUserStatus) LT(x UserStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelperUserStatus) LTE(x UserStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperUserStatus) GT(x UserStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelperUserStatus) GTE(x UserStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperUserStatus) IN(slice []UserStatus) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperUserStatus) NIN(slice []UserStatus) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var TguserWhere = struct {
	UserID     whereHelperint64
	TelegramID whereHelperint64
	Username   whereHelperstring
	Status     whereHelperUserStatus
}{
	UserID:     whereHelperint64{field: "\"tguser\".\"user_id\""},
	TelegramID: whereHelperint64{field: "\"tguser\".\"telegram_id\""},
	Username:   whereHelperstring{field: "\"tguser\".\"username\""},
	Status:     whereHelperUserStatus{field: "\"tguser\".\"status\""},
}

// TguserRels is where relationship names are stored.
var TguserRels = struct {
	UserSubs string
}{
	UserSubs: "UserSubs",
}

// tguserR is where relationships are stored.
type tguserR struct {
	UserSubs SubSlice `boil:"UserSubs" json:"UserSubs" toml:"UserSubs" yaml:"UserSubs"`
}

// NewStruct creates a new relationship struct
func (*tguserR) NewStruct() *tguserR {
	return &tguserR{}
}

func (r *tguserR) GetUserSubs() SubSlice {
	if r == nil {
		return nil
	}
	return r.UserSubs
}

// tguserL is where Load methods for each relationship are stored.
type tguserL struct{}

var (
	tguserAllColumns            = []string{"user_id", "telegram_id", "username", "status"}
	tguserColumnsWithoutDefault = []string{"telegram_id", "username", "status"}
	tguserColumnsWithDefault    = []string{"user_id"}
	tguserPrimaryKeyColumns     = []string{"user_id"}
	tguserGeneratedColumns      = []string{}
)

type (
	// TguserSlice is an alias for a slice of pointers to Tguser.
	// This should almost always be used instead of []Tguser.
	TguserSlice []*Tguser
	// TguserHook is the signature for custom Tguser hook methods
	TguserHook func(context.Context, boil.ContextExecutor, *Tguser) error

	tguserQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	tguserType                 = reflect.TypeOf(&Tguser{})
	tguserMapping              = queries.MakeStructMapping(tguserType)
	tguserPrimaryKeyMapping, _ = queries.BindMapping(tguserType, tguserMapping, tguserPrimaryKeyColumns)
	tguserInsertCacheMut       sync.RWMutex
	tguserInsertCache          = make(map[string]insertCache)
	tguserUpdateCacheMut       sync.RWMutex
	tguserUpdateCache          = make(map[string]updateCache)
	tguserUpsertCacheMut       sync.RWMutex
	tguserUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var tguserAfterSelectHooks []TguserHook

var tguserBeforeInsertHooks []TguserHook
var tguserAfterInsertHooks []TguserHook

var tguserBeforeUpdateHooks []TguserHook
var tguserAfterUpdateHooks []TguserHook

var tguserBeforeDeleteHooks []TguserHook
var tguserAfterDeleteHooks []TguserHook

var tguserBeforeUpsertHooks []TguserHook
var tguserAfterUpsertHooks []TguserHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Tguser) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tguserAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Tguser) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tguserBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Tguser) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tguserAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Tguser) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tguserBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Tguser) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tguserAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Tguser) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tguserBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Tguser) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tguserAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Tguser) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tguserBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Tguser) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tguserAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTguserHook registers your hook function for all future operations.
func AddTguserHook(hookPoint boil.HookPoint, tguserHook TguserHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		tguserAfterSelectHooks = append(tguserAfterSelectHooks, tguserHook)
	case boil.BeforeInsertHook:
		tguserBeforeInsertHooks = append(tguserBeforeInsertHooks, tguserHook)
	case boil.AfterInsertHook:
		tguserAfterInsertHooks = append(tguserAfterInsertHooks, tguserHook)
	case boil.BeforeUpdateHook:
		tguserBeforeUpdateHooks = append(tguserBeforeUpdateHooks, tguserHook)
	case boil.AfterUpdateHook:
		tguserAfterUpdateHooks = append(tguserAfterUpdateHooks, tguserHook)
	case boil.BeforeDeleteHook:
		tguserBeforeDeleteHooks = append(tguserBeforeDeleteHooks, tguserHook)
	case boil.AfterDeleteHook:
		tguserAfterDeleteHooks = append(tguserAfterDeleteHooks, tguserHook)
	case boil.BeforeUpsertHook:
		tguserBeforeUpsertHooks = append(tguserBeforeUpsertHooks, tguserHook)
	case boil.AfterUpsertHook:
		tguserAfterUpsertHooks = append(tguserAfterUpsertHooks, tguserHook)
	}
}

// OneG returns a single tguser record from the query using the global executor.
func (q tguserQuery) OneG(ctx context.Context) (*Tguser, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single tguser record from the query.
func (q tguserQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Tguser, error) {
	o := &Tguser{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for tguser")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Tguser records from the query using the global executor.
func (q tguserQuery) AllG(ctx context.Context) (TguserSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all Tguser records from the query.
func (q tguserQuery) All(ctx context.Context, exec boil.ContextExecutor) (TguserSlice, error) {
	var o []*Tguser

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Tguser slice")
	}

	if len(tguserAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Tguser records in the query using the global executor
func (q tguserQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all Tguser records in the query.
func (q tguserQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count tguser rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q tguserQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q tguserQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if tguser exists")
	}

	return count > 0, nil
}

// UserSubs retrieves all the sub's Subs with an executor via user_id column.
func (o *Tguser) UserSubs(mods ...qm.QueryMod) subQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"sub\".\"user_id\"=?", o.UserID),
	)

	return Subs(queryMods...)
}

// LoadUserSubs allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (tguserL) LoadUserSubs(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTguser interface{}, mods queries.Applicator) error {
	var slice []*Tguser
	var object *Tguser

	if singular {
		var ok bool
		object, ok = maybeTguser.(*Tguser)
		if !ok {
			object = new(Tguser)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTguser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTguser))
			}
		}
	} else {
		s, ok := maybeTguser.(*[]*Tguser)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTguser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTguser))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &tguserR{}
		}
		args = append(args, object.UserID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tguserR{}
			}

			for _, a := range args {
				if a == obj.UserID {
					continue Outer
				}
			}

			args = append(args, obj.UserID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sub`),
		qm.WhereIn(`sub.user_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load sub")
	}

	var resultSlice []*Sub
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice sub")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on sub")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sub")
	}

	if len(subAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.UserSubs = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &subR{}
			}
			foreign.R.User = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.UserID == foreign.UserID {
				local.R.UserSubs = append(local.R.UserSubs, foreign)
				if foreign.R == nil {
					foreign.R = &subR{}
				}
				foreign.R.User = local
				break
			}
		}
	}

	return nil
}

// AddUserSubsG adds the given related objects to the existing relationships
// of the tguser, optionally inserting them as new records.
// Appends related to o.R.UserSubs.
// Sets related.R.User appropriately.
// Uses the global database handle.
func (o *Tguser) AddUserSubsG(ctx context.Context, insert bool, related ...*Sub) error {
	return o.AddUserSubs(ctx, boil.GetContextDB(), insert, related...)
}

// AddUserSubs adds the given related objects to the existing relationships
// of the tguser, optionally inserting them as new records.
// Appends related to o.R.UserSubs.
// Sets related.R.User appropriately.
func (o *Tguser) AddUserSubs(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Sub) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.UserID = o.UserID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"sub\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
				strmangle.WhereClause("\"", "\"", 2, subPrimaryKeyColumns),
			)
			values := []interface{}{o.UserID, rel.UserID, rel.CreatorID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.UserID = o.UserID
		}
	}

	if o.R == nil {
		o.R = &tguserR{
			UserSubs: related,
		}
	} else {
		o.R.UserSubs = append(o.R.UserSubs, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &subR{
				User: o,
			}
		} else {
			rel.R.User = o
		}
	}
	return nil
}

// Tgusers retrieves all the records using an executor.
func Tgusers(mods ...qm.QueryMod) tguserQuery {
	mods = append(mods, qm.From("\"tguser\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"tguser\".*"})
	}

	return tguserQuery{q}
}

// FindTguserG retrieves a single record by ID.
func FindTguserG(ctx context.Context, userID int64, selectCols ...string) (*Tguser, error) {
	return FindTguser(ctx, boil.GetContextDB(), userID, selectCols...)
}

// FindTguser retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTguser(ctx context.Context, exec boil.ContextExecutor, userID int64, selectCols ...string) (*Tguser, error) {
	tguserObj := &Tguser{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"tguser\" where \"user_id\"=$1", sel,
	)

	q := queries.Raw(query, userID)

	err := q.Bind(ctx, exec, tguserObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from tguser")
	}

	if err = tguserObj.doAfterSelectHooks(ctx, exec); err != nil {
		return tguserObj, err
	}

	return tguserObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Tguser) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Tguser) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no tguser provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tguserColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	tguserInsertCacheMut.RLock()
	cache, cached := tguserInsertCache[key]
	tguserInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			tguserAllColumns,
			tguserColumnsWithDefault,
			tguserColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(tguserType, tguserMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(tguserType, tguserMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"tguser\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"tguser\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into tguser")
	}

	if !cached {
		tguserInsertCacheMut.Lock()
		tguserInsertCache[key] = cache
		tguserInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single Tguser record using the global executor.
// See Update for more documentation.
func (o *Tguser) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the Tguser.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Tguser) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	tguserUpdateCacheMut.RLock()
	cache, cached := tguserUpdateCache[key]
	tguserUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			tguserAllColumns,
			tguserPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update tguser, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"tguser\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, tguserPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(tguserType, tguserMapping, append(wl, tguserPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update tguser row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for tguser")
	}

	if !cached {
		tguserUpdateCacheMut.Lock()
		tguserUpdateCache[key] = cache
		tguserUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q tguserQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q tguserQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for tguser")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for tguser")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o TguserSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TguserSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tguserPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"tguser\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, tguserPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in tguser slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all tguser")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Tguser) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Tguser) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no tguser provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tguserColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	tguserUpsertCacheMut.RLock()
	cache, cached := tguserUpsertCache[key]
	tguserUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			tguserAllColumns,
			tguserColumnsWithDefault,
			tguserColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			tguserAllColumns,
			tguserPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert tguser, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(tguserPrimaryKeyColumns))
			copy(conflict, tguserPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"tguser\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(tguserType, tguserMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(tguserType, tguserMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert tguser")
	}

	if !cached {
		tguserUpsertCacheMut.Lock()
		tguserUpsertCache[key] = cache
		tguserUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single Tguser record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Tguser) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single Tguser record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Tguser) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Tguser provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), tguserPrimaryKeyMapping)
	sql := "DELETE FROM \"tguser\" WHERE \"user_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from tguser")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for tguser")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q tguserQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q tguserQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no tguserQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from tguser")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for tguser")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o TguserSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TguserSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(tguserBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tguserPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"tguser\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, tguserPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from tguser slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for tguser")
	}

	if len(tguserAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Tguser) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no Tguser provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Tguser) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTguser(ctx, exec, o.UserID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TguserSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty TguserSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TguserSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TguserSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tguserPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"tguser\".* FROM \"tguser\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, tguserPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TguserSlice")
	}

	*o = slice

	return nil
}

// TguserExistsG checks if the Tguser row exists.
func TguserExistsG(ctx context.Context, userID int64) (bool, error) {
	return TguserExists(ctx, boil.GetContextDB(), userID)
}

// TguserExists checks if the Tguser row exists.
func TguserExists(ctx context.Context, exec boil.ContextExecutor, userID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"tguser\" where \"user_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, userID)
	}
	row := exec.QueryRowContext(ctx, sql, userID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if tguser exists")
	}

	return exists, nil
}
