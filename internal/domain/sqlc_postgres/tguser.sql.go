// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: tguser.sql

package models

import (
	"context"
	"database/sql"
)

const deleteTguser = `-- name: DeleteTguser :exec
DELETE FROM tguser
WHERE user_id == $1
`

func (q *Queries) DeleteTguser(ctx context.Context, userID int64) error {
	_, err := q.db.ExecContext(ctx, deleteTguser, userID)
	return err
}

const findTguserID = `-- name: FindTguserID :one
SELECT user_id, telegram_id, username, status FROM tguser
WHERE user_id = $1 LIMIT 1
`

func (q *Queries) FindTguserID(ctx context.Context, userID int64) (*Tguser, error) {
	row := q.db.QueryRowContext(ctx, findTguserID, userID)
	var i Tguser
	err := row.Scan(
		&i.UserID,
		&i.TelegramID,
		&i.Username,
		&i.Status,
	)
	return &i, err
}

const findTguserTelegramID = `-- name: FindTguserTelegramID :one
SELECT user_id, telegram_id, username, status FROM tguser
WHERE telegram_id = $1 LIMIT 1
`

func (q *Queries) FindTguserTelegramID(ctx context.Context, telegramID int64) (*Tguser, error) {
	row := q.db.QueryRowContext(ctx, findTguserTelegramID, telegramID)
	var i Tguser
	err := row.Scan(
		&i.UserID,
		&i.TelegramID,
		&i.Username,
		&i.Status,
	)
	return &i, err
}

const insertTguser = `-- name: InsertTguser :one
INSERT INTO tguser (
       Telegram_id,
       Username,
       Status
) VALUES (
  $1, $2, $3
) RETURNING user_id, telegram_id, username, status
`

type InsertTguserParams struct {
	TelegramID int64      `db:"telegram_id"`
	Username   string     `db:"username"`
	Status     UserStatus `db:"status"`
}

func (q *Queries) InsertTguser(ctx context.Context, arg InsertTguserParams) (*Tguser, error) {
	row := q.db.QueryRowContext(ctx, insertTguser, arg.TelegramID, arg.Username, arg.Status)
	var i Tguser
	err := row.Scan(
		&i.UserID,
		&i.TelegramID,
		&i.Username,
		&i.Status,
	)
	return &i, err
}

const isExistTguser = `-- name: IsExistTguser :one
SELECT EXISTS (SELECT user_id, telegram_id, username, status FROM tguser
WHERE telegram_id = $1)
`

func (q *Queries) IsExistTguser(ctx context.Context, telegramID int64) (bool, error) {
	row := q.db.QueryRowContext(ctx, isExistTguser, telegramID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const listTguser = `-- name: ListTguser :many
SELECT user_id, telegram_id, username, status FROM tguser OFFSET $1 LIMIT $2
`

type ListTguserParams struct {
	Offset int32 `db:"offset"`
	Limit  int32 `db:"limit"`
}

func (q *Queries) ListTguser(ctx context.Context, arg ListTguserParams) ([]*Tguser, error) {
	rows, err := q.db.QueryContext(ctx, listTguser, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Tguser{}
	for rows.Next() {
		var i Tguser
		if err := rows.Scan(
			&i.UserID,
			&i.TelegramID,
			&i.Username,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTguser = `-- name: UpdateTguser :one
UPDATE tguser
SET
	Telegram_id = COALESCE($1, telegram_id),
	Username = COALESCE($2, username),
	Status = COALESCE($3, status)
WHERE
	user_id = $4
RETURNING user_id, telegram_id, username, status
`

type UpdateTguserParams struct {
	TelegramID sql.NullInt64  `db:"telegram_id"`
	Username   sql.NullString `db:"username"`
	Status     NullUserStatus `db:"status"`
	UserID     int64          `db:"user_id"`
}

func (q *Queries) UpdateTguser(ctx context.Context, arg UpdateTguserParams) (*Tguser, error) {
	row := q.db.QueryRowContext(ctx, updateTguser,
		arg.TelegramID,
		arg.Username,
		arg.Status,
		arg.UserID,
	)
	var i Tguser
	err := row.Scan(
		&i.UserID,
		&i.TelegramID,
		&i.Username,
		&i.Status,
	)
	return &i, err
}
