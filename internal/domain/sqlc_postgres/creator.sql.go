// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: creator.sql

package models

import (
	"context"
	"database/sql"
)

const deleteCreator = `-- name: DeleteCreator :exec
DELETE FROM creator
WHERE creator_id == $1
`

func (q *Queries) DeleteCreator(ctx context.Context, creatorID int64) error {
	_, err := q.db.ExecContext(ctx, deleteCreator, creatorID)
	return err
}

const findCreatorID = `-- name: FindCreatorID :one
SELECT creator_id, telegram_id, username, password, email, chan_name FROM creator
WHERE creator_id = $1 LIMIT 1
`

func (q *Queries) FindCreatorID(ctx context.Context, creatorID int64) (*Creator, error) {
	row := q.db.QueryRowContext(ctx, findCreatorID, creatorID)
	var i Creator
	err := row.Scan(
		&i.CreatorID,
		&i.TelegramID,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.ChanName,
	)
	return &i, err
}

const findCreatorTelegramID = `-- name: FindCreatorTelegramID :one
SELECT creator_id, telegram_id, username, password, email, chan_name FROM creator
WHERE creator_id = $1 LIMIT 1
`

func (q *Queries) FindCreatorTelegramID(ctx context.Context, creatorID int64) (*Creator, error) {
	row := q.db.QueryRowContext(ctx, findCreatorTelegramID, creatorID)
	var i Creator
	err := row.Scan(
		&i.CreatorID,
		&i.TelegramID,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.ChanName,
	)
	return &i, err
}

const insertCreator = `-- name: InsertCreator :one
INSERT INTO Creator (
       	Telegram_id,
	Username,
       	Password,
	Email,
	Chan_Name
) VALUES (
  $1, $2, $3, $4, $5
) RETURNING creator_id, telegram_id, username, password, email, chan_name
`

type InsertCreatorParams struct {
	TelegramID int64          `db:"telegram_id"`
	Username   string         `db:"username"`
	Password   []byte         `db:"password"`
	Email      sql.NullString `db:"email"`
	ChanName   sql.NullString `db:"chan_name"`
}

func (q *Queries) InsertCreator(ctx context.Context, arg InsertCreatorParams) (*Creator, error) {
	row := q.db.QueryRowContext(ctx, insertCreator,
		arg.TelegramID,
		arg.Username,
		arg.Password,
		arg.Email,
		arg.ChanName,
	)
	var i Creator
	err := row.Scan(
		&i.CreatorID,
		&i.TelegramID,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.ChanName,
	)
	return &i, err
}

const isExistCreator = `-- name: IsExistCreator :one
SELECT EXISTS (SELECT creator_id, telegram_id, username, password, email, chan_name FROM creator
WHERE telegram_id = $1)
`

func (q *Queries) IsExistCreator(ctx context.Context, telegramID int64) (bool, error) {
	row := q.db.QueryRowContext(ctx, isExistCreator, telegramID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const listCreator = `-- name: ListCreator :many
SELECT creator_id, telegram_id, username, password, email, chan_name FROM creator OFFSET $1 LIMIT $2
`

type ListCreatorParams struct {
	Offset int32 `db:"offset"`
	Limit  int32 `db:"limit"`
}

func (q *Queries) ListCreator(ctx context.Context, arg ListCreatorParams) ([]*Creator, error) {
	rows, err := q.db.QueryContext(ctx, listCreator, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Creator{}
	for rows.Next() {
		var i Creator
		if err := rows.Scan(
			&i.CreatorID,
			&i.TelegramID,
			&i.Username,
			&i.Password,
			&i.Email,
			&i.ChanName,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCreator = `-- name: UpdateCreator :one
UPDATE creator
SET
	Telegram_id = COALESCE($1, telegram_id),
	Username = COALESCE($2, username),
	Password = COALESCE($3, password),
	Email = COALESCE($4, email),
	Chan_Name = COALESCE($5, chan_name)
WHERE
	creator_id = $6
RETURNING creator_id, telegram_id, username, password, email, chan_name
`

type UpdateCreatorParams struct {
	TelegramID sql.NullInt64  `db:"telegram_id"`
	Username   sql.NullString `db:"username"`
	Password   []byte         `db:"password"`
	Email      sql.NullString `db:"email"`
	ChanName   sql.NullString `db:"chan_name"`
	CreatorID  int64          `db:"creator_id"`
}

func (q *Queries) UpdateCreator(ctx context.Context, arg UpdateCreatorParams) (*Creator, error) {
	row := q.db.QueryRowContext(ctx, updateCreator,
		arg.TelegramID,
		arg.Username,
		arg.Password,
		arg.Email,
		arg.ChanName,
		arg.CreatorID,
	)
	var i Creator
	err := row.Scan(
		&i.CreatorID,
		&i.TelegramID,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.ChanName,
	)
	return &i, err
}
