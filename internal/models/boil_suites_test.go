// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Creators", testCreators)
	t.Run("SchemaMigrations", testSchemaMigrations)
	t.Run("Subs", testSubs)
	t.Run("SubHistories", testSubHistories)
	t.Run("Tgusers", testTgusers)
}

func TestDelete(t *testing.T) {
	t.Run("Creators", testCreatorsDelete)
	t.Run("SchemaMigrations", testSchemaMigrationsDelete)
	t.Run("Subs", testSubsDelete)
	t.Run("SubHistories", testSubHistoriesDelete)
	t.Run("Tgusers", testTgusersDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Creators", testCreatorsQueryDeleteAll)
	t.Run("SchemaMigrations", testSchemaMigrationsQueryDeleteAll)
	t.Run("Subs", testSubsQueryDeleteAll)
	t.Run("SubHistories", testSubHistoriesQueryDeleteAll)
	t.Run("Tgusers", testTgusersQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Creators", testCreatorsSliceDeleteAll)
	t.Run("SchemaMigrations", testSchemaMigrationsSliceDeleteAll)
	t.Run("Subs", testSubsSliceDeleteAll)
	t.Run("SubHistories", testSubHistoriesSliceDeleteAll)
	t.Run("Tgusers", testTgusersSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Creators", testCreatorsExists)
	t.Run("SchemaMigrations", testSchemaMigrationsExists)
	t.Run("Subs", testSubsExists)
	t.Run("SubHistories", testSubHistoriesExists)
	t.Run("Tgusers", testTgusersExists)
}

func TestFind(t *testing.T) {
	t.Run("Creators", testCreatorsFind)
	t.Run("SchemaMigrations", testSchemaMigrationsFind)
	t.Run("Subs", testSubsFind)
	t.Run("SubHistories", testSubHistoriesFind)
	t.Run("Tgusers", testTgusersFind)
}

func TestBind(t *testing.T) {
	t.Run("Creators", testCreatorsBind)
	t.Run("SchemaMigrations", testSchemaMigrationsBind)
	t.Run("Subs", testSubsBind)
	t.Run("SubHistories", testSubHistoriesBind)
	t.Run("Tgusers", testTgusersBind)
}

func TestOne(t *testing.T) {
	t.Run("Creators", testCreatorsOne)
	t.Run("SchemaMigrations", testSchemaMigrationsOne)
	t.Run("Subs", testSubsOne)
	t.Run("SubHistories", testSubHistoriesOne)
	t.Run("Tgusers", testTgusersOne)
}

func TestAll(t *testing.T) {
	t.Run("Creators", testCreatorsAll)
	t.Run("SchemaMigrations", testSchemaMigrationsAll)
	t.Run("Subs", testSubsAll)
	t.Run("SubHistories", testSubHistoriesAll)
	t.Run("Tgusers", testTgusersAll)
}

func TestCount(t *testing.T) {
	t.Run("Creators", testCreatorsCount)
	t.Run("SchemaMigrations", testSchemaMigrationsCount)
	t.Run("Subs", testSubsCount)
	t.Run("SubHistories", testSubHistoriesCount)
	t.Run("Tgusers", testTgusersCount)
}

func TestHooks(t *testing.T) {
	t.Run("Creators", testCreatorsHooks)
	t.Run("SchemaMigrations", testSchemaMigrationsHooks)
	t.Run("Subs", testSubsHooks)
	t.Run("SubHistories", testSubHistoriesHooks)
	t.Run("Tgusers", testTgusersHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Creators", testCreatorsInsert)
	t.Run("Creators", testCreatorsInsertWhitelist)
	t.Run("SchemaMigrations", testSchemaMigrationsInsert)
	t.Run("SchemaMigrations", testSchemaMigrationsInsertWhitelist)
	t.Run("Subs", testSubsInsert)
	t.Run("Subs", testSubsInsertWhitelist)
	t.Run("SubHistories", testSubHistoriesInsert)
	t.Run("SubHistories", testSubHistoriesInsertWhitelist)
	t.Run("Tgusers", testTgusersInsert)
	t.Run("Tgusers", testTgusersInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("SubToCreatorUsingCreator", testSubToOneCreatorUsingCreator)
	t.Run("SubToTguserUsingUser", testSubToOneTguserUsingUser)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("CreatorToSubs", testCreatorToManySubs)
	t.Run("TguserToUserSubs", testTguserToManyUserSubs)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("SubToCreatorUsingSubs", testSubToOneSetOpCreatorUsingCreator)
	t.Run("SubToTguserUsingUserSubs", testSubToOneSetOpTguserUsingUser)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("CreatorToSubs", testCreatorToManyAddOpSubs)
	t.Run("TguserToUserSubs", testTguserToManyAddOpUserSubs)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {}

func TestReload(t *testing.T) {
	t.Run("Creators", testCreatorsReload)
	t.Run("SchemaMigrations", testSchemaMigrationsReload)
	t.Run("Subs", testSubsReload)
	t.Run("SubHistories", testSubHistoriesReload)
	t.Run("Tgusers", testTgusersReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Creators", testCreatorsReloadAll)
	t.Run("SchemaMigrations", testSchemaMigrationsReloadAll)
	t.Run("Subs", testSubsReloadAll)
	t.Run("SubHistories", testSubHistoriesReloadAll)
	t.Run("Tgusers", testTgusersReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Creators", testCreatorsSelect)
	t.Run("SchemaMigrations", testSchemaMigrationsSelect)
	t.Run("Subs", testSubsSelect)
	t.Run("SubHistories", testSubHistoriesSelect)
	t.Run("Tgusers", testTgusersSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Creators", testCreatorsUpdate)
	t.Run("SchemaMigrations", testSchemaMigrationsUpdate)
	t.Run("Subs", testSubsUpdate)
	t.Run("SubHistories", testSubHistoriesUpdate)
	t.Run("Tgusers", testTgusersUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Creators", testCreatorsSliceUpdateAll)
	t.Run("SchemaMigrations", testSchemaMigrationsSliceUpdateAll)
	t.Run("Subs", testSubsSliceUpdateAll)
	t.Run("SubHistories", testSubHistoriesSliceUpdateAll)
	t.Run("Tgusers", testTgusersSliceUpdateAll)
}
